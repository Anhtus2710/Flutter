const express = require("express");
const router = express.Router();
const Question = require("../models/Question");

// ‚ûï Th√™m c√¢u h·ªèi m·ªõi
router.post("/", async (req, res) => {
  try {
    const newQuestion = new Question(req.body);
    await newQuestion.save();
    res.status(201).json({ message: "Th√™m c√¢u h·ªèi th√†nh c√¥ng", data: newQuestion });
  } catch (err) {
    res.status(500).json({ message: "L·ªói th√™m c√¢u h·ªèi", error: err.message });
  }
});

// üìã L·∫•y to√†n b·ªô c√¢u h·ªèi
router.get("/", async (req, res) => {
  try {
    const questions = await Question.find();
    res.json(questions);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch", error: err.message });
  }
});

// üß† L·∫•y ng·∫´u nhi√™n 10 c√¢u theo m·ª©c ƒë·ªô
router.get("/random/:level", async (req, res) => {
  try {
    const questions = await Question.aggregate([
      { $match: { level: req.params.level } },
      { $sample: { size: 10 } }
    ]);
    res.json(questions);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n", error: err.message });
  }
});

// üìù S·ª≠a c√¢u h·ªèi theo ID
router.put("/:id", async (req, res) => {
  try {
    const updated = await Question.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi" });
    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: updated });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t", error: err.message });
  }
});

// ‚ùå X√≥a c√¢u h·ªèi theo ID
router.delete("/:id", async (req, res) => {
  try {
    const deleted = await Question.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ x√≥a" });
    res.json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói x√≥a", error: err.message });
  }
});

module.exports = router;
